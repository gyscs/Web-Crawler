Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    Answer: Because ParallelWebCrawler visited more urls than SequentialWebCrawler in the same time limits. In my
    results, the ParallelWebCrawler visited 9 urls while the SequentialWebCrawler only visited 3. This causes the parser
    of ParallelWebCrawler takes more time.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        Answer: Because parallel crawler will create a thread pool and manage the subtasks into the thread pool. This
        action will cost some system resources. If the computer only has one processor, it cannot benefit from the
        parallelism.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        Answer: For example, in my computer, which has 8 processors, the parallel web crawler performs better than the
        sequential crawler. This is because the same amount of tasks are distributed to 8 processors. Each processor's
        workload is reduced.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    Answer: The Profiler class is used to record the execution time of a certain method. In this project, the crawl and
    parser time are recorded and reported.

    (b) What are the join points of the Profiler in the web crawler program?

    Answer: The @Profiled annotation.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    Answer:
    1. Strategy Pattern.
        Used in WebCrawler, SequentialWebCrawler, ParallelWebCrawler
        Like: This pattern can make the program switch between different implementation easily.
        Dislike: No dislike part.
    2. Builder Pattern.
        Used in CrawlerConfiguration, CrawlResult
        Like: Builder pattern can reduce the parameters when initialize a new object.
        Dislike: The classes using builder pattern have to include a builder class inside, making the code seems redundant.
    3. Dependency Injection.
        Used in ProfilerImpl, ParallelWebCrawler, SequentialWebCrawler
        Like: The pattern uses a framework to create objects for the program, which can help to manage the dependencies.
        Dislike: Require extra framework to realize this function. In fact, in this project, one bug is caused by the
        version of Guice.



